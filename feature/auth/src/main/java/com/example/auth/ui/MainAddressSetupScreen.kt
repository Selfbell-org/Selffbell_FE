package com.example.auth.ui

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.auth.R
import com.naver.maps.map.CameraUpdate
import com.naver.maps.map.NaverMap
import com.naver.maps.map.overlay.Marker
import com.selfbell.auth.ui.AuthUiState
import com.selfbell.auth.ui.AuthViewModel
import com.selfbell.core.navigation.AppRoute
import com.selfbell.core.ui.composables.OnboardingProgressBar
import com.selfbell.core.ui.composables.ReusableNaverMap
import com.selfbell.core.ui.composables.SelfBellButton
import com.selfbell.core.ui.composables.moveOrAddMarker
import com.selfbell.core.ui.theme.GrayInactive
import com.selfbell.core.ui.theme.Pretendard
import com.selfbell.core.ui.theme.Primary
import com.selfbell.core.ui.theme.SelfBellTheme
import com.selfbell.core.ui.theme.Typography
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainAddressSetupScreen(
    navController: NavController,
    // üìå Receive address, lat, and lon as parameters
    address: String,
    lat: Double,
    lon: Double,
    viewModel: MainAddressSetupViewModel = hiltViewModel(),
    authViewModel: AuthViewModel = hiltViewModel(),
    modifier: Modifier = Modifier
) {
    val uiState by viewModel.uiState.collectAsState()
    var marker by remember { mutableStateOf<Marker?>(null) }
    var naverMap by remember { mutableStateOf<NaverMap?>(null) }

    var selectedAddrType by remember { mutableStateOf("Ïßë") }
    var isDirectInputSelected by remember { mutableStateOf(false) }
    var directInputName by remember { mutableStateOf("") }
    val directInputFocusRequester = remember { FocusRequester() }

    // üìå API Ìò∏Ï∂ú ÏÉÅÌÉúÎ•º Í¥ÄÏ∞∞Ìï©ÎãàÎã§.
    val authUiState by authViewModel.uiState.collectAsState()
    val snackbarHostState = remember { SnackbarHostState() }
    val coroutineScope = rememberCoroutineScope()

    LaunchedEffect(isDirectInputSelected) {
        if (isDirectInputSelected) {
            directInputFocusRequester.requestFocus()
        }
    }

    // uiState.userLatLng Í∞íÏù¥ Î≥ÄÍ≤ΩÎê† ÎïåÎßå ÎßàÏª§Î•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÍ≥† Ïπ¥Î©îÎùº Ïù¥Îèô
    LaunchedEffect(uiState.userLatLng) {
        uiState.userLatLng?.let { pos ->
            naverMap?.let { map ->
                marker = moveOrAddMarker(map, pos, marker)
                map.moveCamera(CameraUpdate.scrollTo(pos))
            }
        }
    }

    // üìå API Ìò∏Ï∂ú ÏÑ±Í≥µ/Ïã§Ìå®Ïóê Îî∞Î•∏ Î°úÏßÅ Ï≤òÎ¶¨
    LaunchedEffect(authUiState) {
        when (authUiState) {
            is AuthUiState.Success -> {
                // API Ìò∏Ï∂ú ÏÑ±Í≥µ Ïãú Îã§Ïùå ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                navController.navigate(AppRoute.CONTACT_REGISTER_ROUTE)
            }
            is AuthUiState.Error -> {
                coroutineScope.launch {
                    val errorMessage = (authUiState as AuthUiState.Error).message
                    snackbarHostState.showSnackbar(
                        message = errorMessage,
                        duration = SnackbarDuration.Short
                    )
                }
            }
            else -> {}
        }
    }

    Scaffold(
        modifier = modifier.fillMaxSize(),
        snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .imePadding(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // == ÏÉÅÎã® Ïò®Î≥¥Îî© Î∞è Ï†úÎ™© ÏòÅÏó≠ ==
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 16.dp)
                ) {
                    OnboardingProgressBar(
                        currentStep = 3,
                        totalSteps = 4
                    )
                    Spacer(modifier = Modifier.height(40.dp))
                    Text(
                        text = "ÏûêÏ£º Ïù¥Ïö©ÌïòÎäî Î©îÏù∏Ï£ºÏÜåÎ•º\nÎì±Î°ùÌï¥ Ï£ºÏÑ∏Ïöî.",
                        style = Typography.headlineMedium,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                }

                // == ÏßÄÎèÑ ÌôîÎ©¥ ÏòÅÏó≠ ==
                Surface(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(180.dp)
                        .padding(horizontal = 16.dp),
                    shape = RoundedCornerShape(16.dp),
                    shadowElevation = 8.dp
                ) {
                    Box {
                        ReusableNaverMap(
                            modifier = Modifier.fillMaxSize(),
                            onMapReady = { map ->
                                naverMap = map
                                uiState.userLatLng?.let { pos ->
                                    marker = moveOrAddMarker(map, pos, marker)
                                    map.moveCamera(CameraUpdate.scrollTo(pos))
                                }
                            },
                            onLocationChanged = { }
                        )
                    }
                }

                // == ÌïòÎã® ÏÑ§Ï†ï UI ÏòÅÏó≠ ==
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 16.dp, vertical = 16.dp)
                        .weight(1f), // ÌïòÎã® Î≤ÑÌäºÏùÑ Ï†úÏô∏Ìïú ÎÇ®ÏùÄ Í≥µÍ∞Ñ Ï∞®ÏßÄ
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        AddressTypeButton(
                            text = "Ïßë",
                            isSelected = selectedAddrType == "Ïßë",
                            onClick = {
                                selectedAddrType = "Ïßë"
                                isDirectInputSelected = false
                                viewModel.updateAddrType("Ïßë")
                            },
                            icon = R.drawable.home_icon,
                            modifier = Modifier.weight(1f)
                        )
                        AddressTypeButton(
                            text = "ÌïôÍµê",
                            isSelected = selectedAddrType == "ÌïôÍµê",
                            onClick = {
                                selectedAddrType = "ÌïôÍµê"
                                isDirectInputSelected = false
                                viewModel.updateAddrType("ÌïôÍµê")
                            },
                            icon = R.drawable.school_icon,
                            modifier = Modifier.weight(1f)
                        )
                        AddressTypeButton(
                            text = "ÏßÅÏ†ë ÏûÖÎ†•",
                            isSelected = isDirectInputSelected,
                            onClick = {
                                isDirectInputSelected = true
                                selectedAddrType = "ÏßÅÏ†ë ÏûÖÎ†•"
                                directInputName = ""
                            },
                            icon = R.drawable.location_icon,
                            modifier = Modifier.weight(1f)
                        )
                    }

                    AnimatedVisibility(
                        visible = isDirectInputSelected,
                        enter = fadeIn(),
                        exit = fadeOut()
                    ) {
                        OutlinedTextField(
                            value = directInputName,
                            onValueChange = { directInputName = it },
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(top = 16.dp)
                                .focusRequester(directInputFocusRequester),
                            placeholder = { Text("Ïòà: ÌöåÏÇ¨, ÌïôÏõê") }
                        )
                    }
                }

                // Îã§ÏùåÏúºÎ°ú Î≤ÑÌäº
                SelfBellButton(
                    text = if (authUiState is AuthUiState.Loading) "Îì±Î°ù Ï§ë..." else "Îã§ÏùåÏúºÎ°ú",
                    onClick = {
                        val name = if (isDirectInputSelected) directInputName else selectedAddrType
                        
                        // ‚úÖ Ïã§Ï†ú Ï£ºÏÜå Îì±Î°ù API Ìò∏Ï∂ú (ÌÜ†ÌÅ∞ÏùÄ AuthInterceptorÏóêÏÑú ÏûêÎèô Ï∂îÍ∞Ä)
                        authViewModel.registerMainAddress(
                            name = name,
                            address = address,
                            lat = lat,
                            lon = lon
                        )
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 16.dp, bottom = 20.dp)
                        .navigationBarsPadding(),
                    enabled = ((selectedAddrType == "ÏßÅÏ†ë ÏûÖÎ†•" && directInputName.isNotBlank()) || (selectedAddrType != "ÏßÅÏ†ë ÏûÖÎ†•")) && authUiState !is AuthUiState.Loading // üìå Î°úÎî© Ï§ëÏùº Îïå ÎπÑÌôúÏÑ±Ìôî
                )
            }

            // üìå Î°úÎî© Ï§ëÏùº Îïå Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ ÌëúÏãú
            if (authUiState is AuthUiState.Loading) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .background(Color.Black.copy(alpha = 0.5f))
                        .clickable(enabled = false) {},
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator()
                }
            }
        }
    }
}

@Composable
fun AddressTypeButton(
    text: String,
    isSelected: Boolean,
    onClick: () -> Unit,
    icon: Int,
    modifier: Modifier = Modifier
) {
    Button(
        onClick = onClick,
        colors = ButtonDefaults.buttonColors(
            containerColor = if (isSelected) Color.White else Color.Transparent,
            contentColor = if (isSelected) Color.Black else GrayInactive
        ),
        shape = RoundedCornerShape(8.dp),
        border = if (isSelected) BorderStroke(1.dp, Color.Black) else BorderStroke(0.dp, GrayInactive),
        modifier = modifier
            .height(48.dp)
    ) {
        Row(
            horizontalArrangement = Arrangement.spacedBy(8.dp, Alignment.CenterHorizontally),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                painter = painterResource(id = icon),
                contentDescription = null,
                tint = if (isSelected) Color.Black else GrayInactive
            )
            Text(
                text = text,
                style = TextStyle(
                    fontSize = 14.sp,
                    lineHeight = 16.sp,
                    fontFamily = Pretendard,
                    fontWeight = FontWeight(600)
                )
            )
        }
    }
}
@Preview
@Composable
fun MainAddressSetupScreenPreview() {
    SelfBellTheme {
        MainAddressSetupScreen(
            navController = rememberNavController(),
            // üìå ÌîÑÎ¶¨Î∑∞Î•º ÏúÑÌï¥ Í∞ÄÏÉÅ Îç∞Ïù¥ÌÑ∞Î•º Ï†úÍ≥µÌï©ÎãàÎã§.
            address = "ÏÑúÏö∏Ïãú ÎèôÏûëÍµ¨ ÏÉÅÎèÑÎ°ú 369",
            lat = 37.4966895,
            lon = 126.9575041
        )
    }
}
