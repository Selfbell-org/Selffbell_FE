Index: feature/home/src/main/java/com/selfbell/home/ui/AddressSearchModal.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.selfbell.home.ui\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport com.selfbell.core.ui.theme.Typography\nimport com.selfbell.feature.home.R\nimport com.selfbell.home.model.MapMarkerData\nimport androidx.compose.ui.text.style.TextOverflow\nimport com.selfbell.core.ui.theme.SelfBellTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport com.selfbell.domain.model.EmergencyBellDetail // ✅ import 추가\n\n// 모달의 상태를 정의하는 Enum\nenum class ModalMode {\n    SEARCH,\n    DETAIL\n}\n\n@Composable\nfun AddressSearchModal(\n    modifier: Modifier = Modifier,\n    searchText: String,\n    onSearchTextChange: (String) -> Unit,\n    onSearchClick: () -> Unit,\n    mapMarkers: List<MapMarkerData>,\n    onMarkerItemClick: (MapMarkerData) -> Unit,\n    selectedEmergencyBellDetail: EmergencyBellDetail?, // ✅ 안심벨 상세정보 파라미터 추가\n    modalMode: ModalMode // ✅ 모달 모드 파라미터 추가\n) {\n    Surface(\n        modifier = modifier\n            .fillMaxWidth(0.93f)\n            .wrapContentHeight()\n            .shadow(\n                elevation = 16.dp,\n                spotColor = Color(0x1A000000),\n                ambientColor = Color(0x1A000000)\n            )\n            .clip(RoundedCornerShape(24.dp))\n            .background(Color(0xCCFFFFFF))\n            .border(\n                width = 1.dp,\n                color = Color(0x4DFFFFFF),\n                shape = RoundedCornerShape(24.dp)\n            ),\n        color = Color.Transparent\n    ) {\n        Column(\n            Modifier.padding(horizontal = 22.dp, vertical = 18.dp)\n        ) {\n            when (modalMode) {\n                ModalMode.SEARCH -> {\n                    // ==== 검색 입력창 ====\n                    Row(verticalAlignment = Alignment.CenterVertically) {\n                        OutlinedTextField(\n                            value = searchText,\n                            onValueChange = onSearchTextChange,\n                            placeholder = { Text(\"내 주변 탐색\", style = Typography.bodyMedium) },\n                            singleLine = true,\n                            shape = RoundedCornerShape(12.dp),\n                            modifier = Modifier.weight(1f)\n                        )\n                        Spacer(Modifier.width(8.dp))\n                        Icon(\n                            painter = painterResource(id = R.drawable.ic_search),\n                            contentDescription = \"검색\",\n                            modifier = Modifier.size(24.dp).clickable { onSearchClick() }\n                        )\n                    }\n                    Spacer(Modifier.height(18.dp))\n\n                    // ==== 마커 리스트 ====\n                    if (mapMarkers.isEmpty() && searchText.isNotBlank()) {\n                        Text(\n                            text = \"주변에 해당 정보가 없습니다.\",\n                            style = Typography.bodyMedium,\n                            modifier = Modifier.padding(vertical = 8.dp).align(Alignment.CenterHorizontally)\n                        )\n                    } else if (mapMarkers.isNotEmpty()){\n                        LazyColumn(\n                            modifier = Modifier.fillMaxWidth().heightIn(max = 160.dp)\n                        ) {\n                            items(mapMarkers) { markerData ->\n                                Row(\n                                    Modifier.fillMaxWidth().height(40.dp).clickable { onMarkerItemClick(markerData) },\n                                    verticalAlignment = Alignment.CenterVertically\n                                ) {\n                                    Image(\n                                        painter = painterResource(id = markerData.getIconResource()),\n                                        contentDescription = markerData.type.name,\n                                        modifier = Modifier.size(38.dp)\n                                    )\n                                    Text(\n                                        markerData.address,\n                                        style = Typography.bodyMedium.copy(fontWeight = FontWeight.SemiBold),\n                                        modifier = Modifier.weight(1f).padding(start = 14.dp),\n                                        maxLines = 1,\n                                        overflow = TextOverflow.Ellipsis\n                                    )\n                                    if (markerData.distance.isNotBlank()) {\n                                        Text(markerData.distance, style = Typography.bodyMedium)\n                                    }\n                                }\n                                Spacer(Modifier.height(10.dp))\n                            }\n                        }\n                    }\n                }\n                ModalMode.DETAIL -> {\n                    // ==== 안심벨 상세 정보 ====\n                    selectedEmergencyBellDetail?.let { detail ->\n                        Column(\n                            modifier = Modifier.fillMaxWidth()\n                        ) {\n                            Text(\n                                text = \"안심벨 상세 정보\",\n                                style = Typography.titleMedium.copy(fontWeight = FontWeight.Bold)\n                            )\n                            Spacer(Modifier.height(16.dp))\n                            Text(\"상세 주소: ${detail.address}\", style = Typography.bodyMedium)\n                            Text(\"관리 전화: ${detail.managerTel}\", style = Typography.bodyMedium)\n                            Text(\"시설 종류: ${detail.type}\", style = Typography.bodyMedium)\n                            Text(\"거리: ${detail.distance}m\", style = Typography.bodyMedium)\n                            // TODO: 필요한 다른 정보 추가\n                        }\n                    } ?: run {\n                        Text(\"상세 정보를 불러오는 중...\", modifier = Modifier.align(Alignment.CenterHorizontally))\n                    }\n                }\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/feature/home/src/main/java/com/selfbell/home/ui/AddressSearchModal.kt b/feature/home/src/main/java/com/selfbell/home/ui/AddressSearchModal.kt
--- a/feature/home/src/main/java/com/selfbell/home/ui/AddressSearchModal.kt	(revision f2adcfbf463c1a9ccf6042c8929274287b32d507)
+++ b/feature/home/src/main/java/com/selfbell/home/ui/AddressSearchModal.kt	(date 1755547717601)
@@ -116,8 +116,10 @@
                                         maxLines = 1,
                                         overflow = TextOverflow.Ellipsis
                                     )
-                                    if (markerData.distance.isNotBlank()) {
-                                        Text(markerData.distance, style = Typography.bodyMedium)
+                                    if (markerData.distance >0) {
+
+                                        Text("${markerData.distance.toInt()}m", style = Typography.bodyMedium)
+
                                     }
                                 }
                                 Spacer(Modifier.height(10.dp))
